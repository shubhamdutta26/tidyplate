[{"path":"http://www.shubhamdutta.com/tidyplate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidyplate authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"tidyplate","dir":"Articles","previous_headings":"","what":"tidyplate","title":"Getting started with `tidyplate`","text":"Microtiter plates microplates become standard tool analytical research clinical diagnostic testing laboratories. convenient, high-throughput tools organizing tissue culture, PCR tests (HIV/ COVID screening), immunological assays ELISA, RIA FIA. offer many advantages traditional assay formats including reduced sample reagent volumes, increased throughput, ease automation. goal tidyplate help researchers convert different types microplates tidy dataframes can used data analysis. tidyplate accepts xlsx csv files formatted specific way input. tidyplate supports types standard microplate formats namely: 6-well, 12-well, 24-well, 48-well, 96-well, 384-well, 1536-well plates. tidyplate four functions: tidy_plate: Transforms input file (xlsx csv) tidy dataframe. check_plate: Checks whether input file valid use tidy_plate(). view_plate_names: Returns names/ id(s) plate input file. build_plate: Generates csv xlsx template plate type.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"tidyplate","what":"Installation","title":"Getting started with `tidyplate`","text":"install tidyplate CRAN: can install development version tidyplate GitHub :","code":"install.packages(\"tidyplate\") # install.packages(\"devtools\") devtools::install_github(\"shubhamdutta26/tidyplate\")"},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"formating-the-input-data-file","dir":"Articles","previous_headings":"tidyplate","what":"Formating the input data file","title":"Getting started with `tidyplate`","text":"figure demonstrates format 12-well plate input file. Colors visualization purposes . input xlsx csv formatted specific way: Top left corner must hold name plate. Column names : 1, 2, 3, forth. Row names : , B, C, forth. must empty row plate.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"example","dir":"Articles","previous_headings":"tidyplate","what":"Example","title":"Getting started with `tidyplate`","text":"example shows use tidyplate. input file xlsx file reads first sheet default. Users can specify sheet using sheet argument xlsx file. Users can also specify variable name column well ids stored (defaults “well”). Please make sure well_id argument match individual plate names input file. First check input file valid : mentioned , formatting input file important. csv excel template plate type can created using build_plate function: want retrieve names individual plates: Read import file tibble: Import multiple csv files separate tibbles: Import multiple csv files list tibbles: multiple excel sheets excel file:","code":"library(tidyplate) file <- system.file(\"extdata\",                      \"example_12_well.xlsx\",                      package = \"tidyplate\") check_plate(file) # No error for valid file #> example_12_well.xlsx: OK; Plate type: 12-well  incorrect_file <- system.file(\"extdata\",                               \"incorrect_format.csv\",                               package = \"tidyplate\") check_plate(incorrect_file) # Error type displayed #> Error: #> ! Verify row and column ids in incorrect_format.csv. #> ℹ Expected column ids: 1, 2, 3, and so on. #> ℹ Expected row ids: A, B, C, and so on. #> ℹ Use the `build_plate()` function to build an empty template. build_plate(plate_type = 96,              n_plates = 2,              file_type = \"xlsx\") # default is csv view_plate_names(file) #> [1] \"drug\"             \"cell_line\"        \"percent_survived\" data <- tidy_plate(file) #> Plate type: 12-well head(data) #> # A tibble: 6 × 4 #>   well  drug      cell_line percent_survived #>   <chr> <chr>     <chr>                <int> #> 1 A01   Neomycin  HEK293                  60 #> 2 A02   Puromycin HEK293                  NA #> 3 A03   Neomycin  Hela                    52 #> 4 A04   Puromycin Hela                    18 #> 5 B01   Neomycin  HEK293                  62 #> 6 B02   Puromycin HEK293                  23 csv_files <- list.files(path = file,                          pattern = \"*.csv\",                         full.names = TRUE)  names <- tools::file_path_sans_ext(basename(csv_files))  # Loop through the filenames and assign data for(i in seq_along(csv_files)) {   assign(names[i], tidy_plate(csv_files[i])) } # Initialize an empty list to store tibbles for each file tb_csv_list <- list()  # Loop through the filenames and assign data for(i in seq_along(csv_files)) {   tb_csv_list[[i]] <- tidy_plate(csv_files[i]) } # as individual tibbles xl_file <- system.file(\"extdata\",                         \"multisheet_example.xlsx\",                         package = \"tidyplate\")  sheets <- readxl::excel_sheets(xl_file)  for (sheet in sheets) {   tb <- tidy_plate(xl_file, sheet = sheet)   name <- paste0(\"tb_\", sheet)   assign(name, tb) } #> Plate type: 6-well #> Plate type: 12-well #> Plate type: 12-well  # as elements of a list # Initialize an empty list to store tibbles for each sheet tb_xl_list <- list()  for (sheet in sheets) {   tb_xl_list[[sheet]] <- tidy_plate(xl_file, sheet = sheet) } #> Plate type: 6-well #> Plate type: 12-well #> Plate type: 12-well"},{"path":"http://www.shubhamdutta.com/tidyplate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shubham Dutta. Author, maintainer, copyright holder.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dutta S (2024). tidyplate: Transform Microplate Data Tibbles. R package version 2.0.1.9000, https://www.shubhamdutta.com/tidyplate/, https://github.com/shubhamdutta26/tidyplate.","code":"@Manual{,   title = {tidyplate: Transform Microplate Data into Tibbles},   author = {Shubham Dutta},   year = {2024},   note = {R package version 2.0.1.9000, https://www.shubhamdutta.com/tidyplate/},   url = {https://github.com/shubhamdutta26/tidyplate}, }"},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"tidyplate","dir":"","previous_headings":"","what":"Transform Microplate Data into Tibbles","title":"Transform Microplate Data into Tibbles","text":"Microtiter plates microplates become standard tool analytical research clinical diagnostic testing laboratories. convenient, high-throughput tools organizing tissue culture, PCR tests (HIV/ COVID screening), immunological assays ELISA, RIA FIA. offer many advantages traditional assay formats including reduced sample reagent volumes, increased throughput, ease automation. goal tidyplate help researchers convert different types microplates tidy dataframes can used data analysis. tidyplate accepts xlsx csv files formatted specific way input. tidyplate supports types standard microplate formats namely: 6-well, 12-well, 24-well, 48-well, 96-well, 384-well, 1536-well plates. tidyplate four functions: tidy_plate: Transforms input file (xlsx csv) tidy dataframe. check_plate: Checks whether input file valid use tidy_plate(). view_plate_names: Returns names/ id(s) plate input file. build_plate: Generates csv xlsx template plate type.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Transform Microplate Data into Tibbles","text":"install tidyplate CRAN: can install development version tidyplate GitHub :","code":"install.packages(\"tidyplate\") # install.packages(\"devtools\") devtools::install_github(\"shubhamdutta26/tidyplate\")"},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"formating-the-input-data-file","dir":"","previous_headings":"","what":"Formating the input data file","title":"Transform Microplate Data into Tibbles","text":"figure demonstrates format 12-well plate input file. Colors visualization purposes . input xlsx csv formatted specific way: Top left corner must hold name plate. Column names : 1, 2, 3, forth. Row names : , B, C, forth. must empty row plate.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Transform Microplate Data into Tibbles","text":"example shows use tidyplate. input file xlsx file reads first sheet default. Users can specify sheet using sheet argument xlsx file. Users can also specify variable name column well ids stored (defaults “well”). Please make sure well_id argument match individual plate names input file. First check input file valid : mentioned , formatting input file important. csv excel template plate type can created using build_plate function: want retrieve names individual plates: Read import file tibble: Import multiple csv files separate tibbles: Import multiple csv files list tibbles: multiple excel sheets excel file:","code":"library(tidyplate) file <- system.file(\"extdata\",                      \"example_12_well.xlsx\",                      package = \"tidyplate\") check_plate(file) # No error for valid file #> example_12_well.xlsx: OK; Plate type: 12-well  incorrect_file <- system.file(\"extdata\",                               \"incorrect_format.csv\",                               package = \"tidyplate\") check_plate(incorrect_file) # Error type displayed #> Error: #> ! Verify row and column ids in incorrect_format.csv. #> ℹ Expected column ids: 1, 2, 3, and so on. #> ℹ Expected row ids: A, B, C, and so on. #> ℹ Use the `build_plate()` function to build an empty template. build_plate(plate_type = 96,              n_plates = 2,              file_type = \"xlsx\") # default is csv view_plate_names(file) #> [1] \"drug\"             \"cell_line\"        \"percent_survived\" data <- tidy_plate(file) #> Plate type: 12-well head(data) #> # A tibble: 6 × 4 #>   well  drug      cell_line percent_survived #>   <chr> <chr>     <chr>                <int> #> 1 A01   Neomycin  HEK293                  60 #> 2 A02   Puromycin HEK293                  NA #> 3 A03   Neomycin  Hela                    52 #> 4 A04   Puromycin Hela                    18 #> 5 B01   Neomycin  HEK293                  62 #> 6 B02   Puromycin HEK293                  23 csv_files <- list.files(path = file,                          pattern = \"*.csv\",                         full.names = TRUE)  names <- tools::file_path_sans_ext(basename(csv_files))  # Loop through the filenames and assign data for(i in seq_along(csv_files)) {   assign(names[i], tidy_plate(csv_files[i])) } # Initialize an empty list to store tibbles for each file tb_csv_list <- list()  # Loop through the filenames and assign data for(i in seq_along(csv_files)) {   tb_csv_list[[i]] <- tidy_plate(csv_files[i]) } # as individual tibbles xl_file <- system.file(\"extdata\",                         \"multisheet_example.xlsx\",                         package = \"tidyplate\")  sheets <- readxl::excel_sheets(xl_file)  for (sheet in sheets) {   tb <- tidy_plate(xl_file, sheet = sheet)   name <- paste0(\"tb_\", sheet)   assign(name, tb) } #> Plate type: 6-well #> Plate type: 12-well #> Plate type: 12-well  # as elements of a list # Initialize an empty list to store tibbles for each sheet tb_xl_list <- list()  for (sheet in sheets) {   tb_xl_list[[sheet]] <- tidy_plate(xl_file, sheet = sheet) } #> Plate type: 6-well #> Plate type: 12-well #> Plate type: 12-well"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a csv or xlsx template for each plate type — build_plate","title":"Generates a csv or xlsx template for each plate type — build_plate","text":"Generates csv xlsx template plate type","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a csv or xlsx template for each plate type — build_plate","text":"","code":"build_plate(   plate_type = 6,   n_plates = 1,   file_type = c(\"csv\", \"xlsx\"),   plate_names = NULL,   file = NULL )"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a csv or xlsx template for each plate type — build_plate","text":"plate_type specific integer (6, 12, 24, 48, 96, 384, 1536) indicating type microwell plate. n_plates positive integer indicating number plates. file_type character string (\"csv\" (default) \"xlsx\") indicating filetype. plate_names character vector unique values assigned plate. length equal value n_plates. file character string naming file.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a csv or xlsx template for each plate type — build_plate","text":"csv xlsx template file.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a csv or xlsx template for each plate type — build_plate","text":"","code":"if (FALSE) { # \\dontrun{ build_plate(plate_type = 6, n_plates = 2) build_plate(plate_type = 6, n_plates = 2, file_type = \"xlsx\") } # }"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the input file is valid for use with the tidy_plate() function — check_plate","title":"Checks whether the input file is valid for use with the tidy_plate() function — check_plate","text":"Checks whether input file valid use tidy_plate() function","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the input file is valid for use with the tidy_plate() function — check_plate","text":"","code":"check_plate(file, well_id = \"well\", sheet = 1)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the input file is valid for use with the tidy_plate() function — check_plate","text":"file character string containing path csv excel file. well_id character string name well id column. sheet file type xlsx sheet name (character) number (integer).","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the input file is valid for use with the tidy_plate() function — check_plate","text":"message indicating whether input file compatible tidy_plate() function","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether the input file is valid for use with the tidy_plate() function — check_plate","text":"","code":"file_path <- system.file(   \"extdata\",   \"example_12_well.xlsx\",   package = \"tidyplate\" )  check_plate(file = file_path) #> example_12_well.xlsx: OK; Plate type: 12-well"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/generate_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a microwell plate shaped csv or excel files from tibble or dataframe. — generate_plate","title":"Generates a microwell plate shaped csv or excel files from tibble or dataframe. — generate_plate","text":"Generates microwell plate shaped csv excel files tibble dataframe.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/generate_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a microwell plate shaped csv or excel files from tibble or dataframe. — generate_plate","text":"","code":"generate_plate(x, well_id, plate_type, file_out, file_type = c(\"csv\", \"xlsx\"))"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/generate_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a microwell plate shaped csv or excel files from tibble or dataframe. — generate_plate","text":"x dataframe tibble. well_id character string integer points column containing well ids. plate_type specific integer (6, 12, 24, 48, 96, 384, 1536) indicating type microwell plate. file_out character string name (path) output file name. file_type character string type exported file (\"csv\", \"xlsx\"). default \"csv\".","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/generate_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a microwell plate shaped csv or excel files from tibble or dataframe. — generate_plate","text":"csv xlsx file.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads and transforms microwell plate to a tibble — tidy_plate","title":"Reads and transforms microwell plate to a tibble — tidy_plate","text":"tidy_plate reads microwell plate shaped csv excel file returns tibble downstream data analysis. order create template file use build_plate function.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads and transforms microwell plate to a tibble — tidy_plate","text":"","code":"tidy_plate(file, well_id = \"well\", sheet = 1)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads and transforms microwell plate to a tibble — tidy_plate","text":"file character string containing path csv excel file. format described . well_id character string name well id column. sheet character integer indicating excel sheet read.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads and transforms microwell plate to a tibble — tidy_plate","text":"tibble.","code":""},{"path":[]},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads and transforms microwell plate to a tibble — tidy_plate","text":"","code":"file_path <- system.file(\"extdata\", \"example_12_well.xlsx\",   package = \"tidyplate\" )  data_12 <- tidy_plate(file = file_path) #> Plate type: 12-well  head(data_12) #> # A tibble: 6 × 4 #>   well  drug      cell_line percent_survived #>   <chr> <chr>     <chr>                <int> #> 1 A01   Neomycin  HEK293                  60 #> 2 A02   Puromycin HEK293                  NA #> 3 A03   Neomycin  Hela                    52 #> 4 A04   Puromycin Hela                    18 #> 5 B01   Neomycin  HEK293                  62 #> 6 B02   Puromycin HEK293                  23"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidyplate-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyplate: Transform Microplate Data into Tibbles — tidyplate-package","title":"tidyplate: Transform Microplate Data into Tibbles — tidyplate-package","text":"goal 'tidyplate' help researchers convert different types microplates tibbles can used data analysis. accepts xlsx csv files formatted specific way input. supports types standard microplate formats 6-well, 12-well, 24-well, 48-well, 96-well, 384-well, , 1536-well plates.","code":""},{"path":[]},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidyplate-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyplate: Transform Microplate Data into Tibbles — tidyplate-package","text":"Maintainer: Shubham Dutta shubhamdutta26@gmail.com (ORCID) [copyright holder]","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the name of each plate in the file — view_plate_names","title":"Returns the name of each plate in the file — view_plate_names","text":"view_plate_names returns names plates input file character vector. case empty duplicates diplays warning returns plate names.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the name of each plate in the file — view_plate_names","text":"","code":"view_plate_names(file, sheet = 1)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the name of each plate in the file — view_plate_names","text":"file path xlsx csv file containing data following types plates: 6, 12, 24, 48, 96, 384, 1536. sheet file type xlsx sheet name (character) number (integer).","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the name of each plate in the file — view_plate_names","text":"character vector","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the name of each plate in the file — view_plate_names","text":"","code":"file_path <- system.file(\"extdata\", \"example_12_well.xlsx\", package = \"tidyplate\")  data_12 <- view_plate_names(file = file_path)  data_12 #> [1] \"drug\"             \"cell_line\"        \"percent_survived\""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-201","dir":"Changelog","previous_headings":"","what":"tidyplate 2.0.1","title":"tidyplate 2.0.1","text":"CRAN release: 2024-10-08","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"minor-changes-2-0-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tidyplate 2.0.1","text":"Exported build_plate() NAMESPACE.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-200","dir":"Changelog","previous_headings":"","what":"tidyplate 2.0.0","title":"tidyplate 2.0.0","text":"CRAN release: 2024-10-04","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidyplate 2.0.0","text":"build_plate(): Generate plate templates.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"tidyplate 2.0.0","text":"functions rewritten improve speed efficiency.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"minor-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tidyplate 2.0.0","text":"Added examples vignette README. Polished Roxygen documentation.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-110","dir":"Changelog","previous_headings":"","what":"tidyplate 1.1.0","title":"tidyplate 1.1.0","text":"CRAN release: 2024-02-04","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"minor-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tidyplate 1.1.0","text":"Removed tidyplate warnings. well_id column now leading zeros.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidyplate 1.1.0","text":"Fixed double file extension printing output messages.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-100","dir":"Changelog","previous_headings":"","what":"tidyplate 1.0.0","title":"tidyplate 1.0.0","text":"CRAN release: 2024-01-11","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"minor-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tidyplate 1.0.0","text":"Added quotes around package name DESCRIPTION. Removed unnecessary files.","code":""},{"path":[]},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"features-0-9-0","dir":"Changelog","previous_headings":"","what":"Features","title":"tidyplate 0.9.0","text":"tidy_plate(): Convert microwell plate data tibbles. check_plate(): Verify errors input file. view_plate_names(): Get individual plate names data.","code":""}]
