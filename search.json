[{"path":"http://www.shubhamdutta.com/tidyplate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidyplate authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"tidyplate","dir":"Articles","previous_headings":"","what":"tidyplate","title":"Getting started with `tidyplate`","text":"Microtiter plates microplates become standard tool analytical research clinical diagnostic testing laboratories. convenient, high-throughput tools organizing tissue culture, PCR tests (HIV/ COVID screening), immunological assays ELISA, RIA FIA. offer many advantages traditional assay formats including reduced sample reagent volumes, increased throughput, ease automation. goal tidyplate help researchers convert different types microplates tidy dataframes can used data analysis. tidyplate accepts xlsx csv files formatted specific way input. tidyplate supports types standard microplate formats namely: 6-well, 12-well, 24-well, 48-well, 96-well, 384-well, 1536-well plates. tidyplate two functions: tidy_plate: function takes input file (xlsx csv) transforms tidy dataframe. check_plate: function checks whether input file valid use tidy_plate() function.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"installation","dir":"Articles","previous_headings":"tidyplate","what":"Installation","title":"Getting started with `tidyplate`","text":"install tidyplate CRAN: can install development version tidyplate GitHub :","code":"install.packages(\"tidyplate\") # install.packages(\"devtools\") devtools::install_github(\"shubhamdutta26/tidyplate\")"},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"formating-the-input-data-file","dir":"Articles","previous_headings":"tidyplate","what":"Formating the input data file","title":"Getting started with `tidyplate`","text":"figure demonstrates format 12-well plate input file. Colors visualization purposes . input xlsx csv formatted specific way: Top left corner must hold name plate. Column names : 1, 2, 3, forth. Row names : , B, C, forth. must empty row plate.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/articles/getting_started.html","id":"example","dir":"Articles","previous_headings":"tidyplate","what":"Example","title":"Getting started with `tidyplate`","text":"example shows use tidyplate. input file xlsx file reads first sheet default. Users can specify sheet using sheet argument xlsx file. Users can also specify variable name column well ids stored (defaults “well”). Please make sure well_id argument match individual plate names input file. First check input file valid : Import file tidy dataframe:","code":"library(tidyplate) file_path <- system.file(\"extdata\", \"example_12_well.xlsx\", package = \"tidyplate\") check_plate(file_path) #> example_12_well.xlsx: OK; Plate type: 12-well data <- tidy_plate(file_path) #> Data: example_12_well.xlsx; Plate type: 12-well plate head(data) #> # A tibble: 6 × 4 #>   well  drug      cell_line percent_survived #>   <chr> <chr>     <chr>                <int> #> 1 A01   Neomycin  HEK293                  60 #> 2 A02   Puromycin HEK293                  NA #> 3 A03   Neomycin  Hela                    52 #> 4 A04   Puromycin Hela                    18 #> 5 B01   Neomycin  HEK293                  62 #> 6 B02   Puromycin HEK293                  23"},{"path":"http://www.shubhamdutta.com/tidyplate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shubham Dutta. Author, maintainer, copyright holder.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dutta S (2024). tidyplate: Transform Microplate Data Tidy Dataframes. R package version 1.1.0.9000, https://www.shubhamdutta.com/tidyplate/, https://github.com/shubhamdutta26/tidyplate.","code":"@Manual{,   title = {tidyplate: Transform Microplate Data into Tidy Dataframes},   author = {Shubham Dutta},   year = {2024},   note = {R package version 1.1.0.9000, https://www.shubhamdutta.com/tidyplate/},   url = {https://github.com/shubhamdutta26/tidyplate}, }"},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"tidyplate","dir":"","previous_headings":"","what":"Transform Microplate Data into Tidy Dataframes","title":"Transform Microplate Data into Tidy Dataframes","text":"Microtiter plates microplates become standard tool analytical research clinical diagnostic testing laboratories. convenient, high-throughput tools organizing tissue culture, PCR tests (HIV/ COVID screening), immunological assays ELISA, RIA FIA. offer many advantages traditional assay formats including reduced sample reagent volumes, increased throughput, ease automation. goal tidyplate help researchers convert different types microplates tidy dataframes can used data analysis. tidyplate accepts xlsx csv files formatted specific way input. tidyplate supports types standard microplate formats namely: 6-well, 12-well, 24-well, 48-well, 96-well, 384-well, 1536-well plates. tidyplate four functions: tidy_plate: Transforms input file (xlsx csv) tidy dataframe. check_plate: Checks whether input file valid use tidy_plate(). view_plate_names: Returns names/ id(s) plate input file. build_plate: Generates csv xlsx template plate type.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Transform Microplate Data into Tidy Dataframes","text":"install tidyplate CRAN: can install development version tidyplate GitHub :","code":"install.packages(\"tidyplate\") # install.packages(\"devtools\") devtools::install_github(\"shubhamdutta26/tidyplate\")"},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"formating-the-input-data-file","dir":"","previous_headings":"","what":"Formating the input data file","title":"Transform Microplate Data into Tidy Dataframes","text":"figure demonstrates format 12-well plate input file. Colors visualization purposes . input xlsx csv formatted specific way: Top left corner must hold name plate. Column names : 1, 2, 3, forth. Row names : , B, C, forth. must empty row plate.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Transform Microplate Data into Tidy Dataframes","text":"example shows use tidyplate. input file xlsx file reads first sheet default. Users can specify sheet using sheet argument xlsx file. Users can also specify variable name column well ids stored (defaults “well”). Please make sure well_id argument match individual plate names input file. First check input file valid : want view names individual plates: Import file tidy dataframe:","code":"library(tidyplate) file_path <- system.file(\"extdata\", \"example_12_well.xlsx\", package = \"tidyplate\") check_plate(file_path) #> example_12_well.xlsx: OK; Plate type: 12-well view_plate_names(file_path) #> [1] \"drug\"             \"cell_line\"        \"percent_survived\" data <- tidy_plate(file_path) #> Data: example_12_well.xlsx; Plate type: 12-well plate head(data) #> # A tibble: 6 × 4 #>   well  drug      cell_line percent_survived #>   <chr> <chr>     <chr>                <int> #> 1 A01   Neomycin  HEK293                  60 #> 2 A02   Puromycin HEK293                  NA #> 3 A03   Neomycin  Hela                    52 #> 4 A04   Puromycin Hela                    18 #> 5 B01   Neomycin  HEK293                  62 #> 6 B02   Puromycin HEK293                  23"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a skeleton csv or xlsx file — build_plate","title":"Returns a skeleton csv or xlsx file — build_plate","text":"Returns skeleton csv xlsx file","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a skeleton csv or xlsx file — build_plate","text":"","code":"build_plate(   plate_type = 6,   n_plates = 1,   file_type = c(\"csv\", \"xlsx\"),   plate_names = NULL,   file = NULL )"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a skeleton csv or xlsx file — build_plate","text":"plate_type Type microwell plate (double) n_plates total number plates (double) file_type Type file; either \"csv\" (default) \"xlsx\" plate_names character vector assigned plate file path file saved (defaults current directory)","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/build_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a skeleton csv or xlsx file — build_plate","text":"csv xlsx file","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the input file can be used to transform to a tidy plate using the tidy_plate() function — check_plate","title":"Checks whether the input file can be used to transform to a tidy plate using the tidy_plate() function — check_plate","text":"Checks whether input file can used transform tidy plate using tidy_plate() function","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the input file can be used to transform to a tidy plate using the tidy_plate() function — check_plate","text":"","code":"check_plate(file, well_id = \"well\", sheet = 1)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the input file can be used to transform to a tidy plate using the tidy_plate() function — check_plate","text":"file path xlsx csv file containing data following types plates: 6, 12, 24, 48, 96, 384, 1536. plate format described . well_id takes character length 1 individual plate names. sheet file type xlsx sheet name (character) number (integer).","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the input file can be used to transform to a tidy plate using the tidy_plate() function — check_plate","text":"error message saying input file can used tidy_plate() function","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/check_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether the input file can be used to transform to a tidy plate using the tidy_plate() function — check_plate","text":"","code":"file_path <- system.file(   \"extdata\",   \"example_12_well.xlsx\",   package = \"tidyplate\" )  check_plate(file = file_path) #> example_12_well.xlsx: OK; Plate type: 12-well"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/pull_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset individual plates from the input file — pull_plate","title":"Subset individual plates from the input file — pull_plate","text":"Subset individual plates input file","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/pull_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset individual plates from the input file — pull_plate","text":"","code":"pull_plate(file, sheet = 1, plate_id)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/pull_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset individual plates from the input file — pull_plate","text":"file path xlsx csv file containing data following types plates: 6, 12, 24, 48, 96, 384, 1536. sheet file type xlsx sheet name (character) number (integer). plate_id Character numeric vector used subset file.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/pull_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset individual plates from the input file — pull_plate","text":"list tibbles","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/pull_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset individual plates from the input file — pull_plate","text":"","code":"file_path <- system.file(\"extdata\", \"example_12_well.xlsx\", package = \"tidyplate\")  n_id = c(1, 3) c_id = c(\"drug\", \"percent_survived\")  data_n <- pull_plate(file = file_path, plate_id = n_id) data_c <- pull_plate(file = file_path, plate_id = c_id)  print(data_n) #> $drug #> # A tibble: 3 × 5 #>   drug  `1`      `2`       `3`      `4`       #>   <chr> <chr>    <chr>     <chr>    <chr>     #> 1 A     Neomycin Puromycin Neomycin Puromycin #> 2 B     Neomycin Puromycin Neomycin Puromycin #> 3 C     DMSO     DMSO      DMSO     DMSO      #>  #> $percent_survived #> # A tibble: 3 × 5 #>   percent_survived `1`   `2`   `3`   `4`   #>   <chr>            <chr> <chr> <chr> <chr> #> 1 A                60    NA    52    18    #> 2 B                62    23    54    16    #> 3 C                98    97    99    98    #>  print(data_c) #> $drug #> # A tibble: 3 × 5 #>   drug  `1`      `2`       `3`      `4`       #>   <chr> <chr>    <chr>     <chr>    <chr>     #> 1 A     Neomycin Puromycin Neomycin Puromycin #> 2 B     Neomycin Puromycin Neomycin Puromycin #> 3 C     DMSO     DMSO      DMSO     DMSO      #>  #> $percent_survived #> # A tibble: 3 × 5 #>   percent_survived `1`   `2`   `3`   `4`   #>   <chr>            <chr> <chr> <chr> <chr> #> 1 A                60    NA    52    18    #> 2 B                62    23    54    16    #> 3 C                98    97    99    98    #>"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a plate to a tidy dataframe — tidy_plate","title":"Transforms a plate to a tidy dataframe — tidy_plate","text":"Transforms plate tidy dataframe","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a plate to a tidy dataframe — tidy_plate","text":"","code":"tidy_plate(file, well_id = \"well\", sheet = 1)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a plate to a tidy dataframe — tidy_plate","text":"file path xlsx csv file containing data following types plates: 6, 12, 24, 48, 96, 384, 1536. plate format described . well_id takes character length 1 individual plate names. sheet file type xlsx sheet name (character) number (integer).","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a plate to a tidy dataframe — tidy_plate","text":"tidy dataframe","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidy_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms a plate to a tidy dataframe — tidy_plate","text":"","code":"file_path <- system.file(\"extdata\", \"example_12_well.xlsx\",   package = \"tidyplate\" )  data_12 <- tidy_plate(file = file_path) #> Data: example_12_well.xlsx; Plate type: 12-well plate  head(data_12) #> # A tibble: 6 × 4 #>   well  drug      cell_line percent_survived #>   <chr> <chr>     <chr>                <int> #> 1 A01   Neomycin  HEK293                  60 #> 2 A02   Puromycin HEK293                  NA #> 3 A03   Neomycin  Hela                    52 #> 4 A04   Puromycin Hela                    18 #> 5 B01   Neomycin  HEK293                  62 #> 6 B02   Puromycin HEK293                  23"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidyplate-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyplate: Transform Microplate Data into Tidy Dataframes — tidyplate-package","title":"tidyplate: Transform Microplate Data into Tidy Dataframes — tidyplate-package","text":"goal 'tidyplate' help researchers convert different types microplates tidy dataframes can used data analysis. accepts xlsx csv files formatted specific way input. supports types standard microplate formats 6-well, 12-well, 24-well, 48-well, 96-well, 384-well, , 1536-well plates.","code":""},{"path":[]},{"path":"http://www.shubhamdutta.com/tidyplate/reference/tidyplate-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyplate: Transform Microplate Data into Tidy Dataframes — tidyplate-package","text":"Maintainer: Shubham Dutta shubhamdutta26@gmail.com (ORCID) [copyright holder]","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the name of each plate in the file — view_plate_names","title":"Returns the name of each plate in the file — view_plate_names","text":"Returns name plate file","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the name of each plate in the file — view_plate_names","text":"","code":"view_plate_names(file, sheet = 1)"},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the name of each plate in the file — view_plate_names","text":"file path xlsx csv file containing data following types plates: 6, 12, 24, 48, 96, 384, 1536. sheet file type xlsx sheet name (character) number (integer).","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the name of each plate in the file — view_plate_names","text":"character vector","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/reference/view_plate_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the name of each plate in the file — view_plate_names","text":"","code":"file_path <- system.file(\"extdata\", \"example_12_well.xlsx\", package = \"tidyplate\")  data_12 <- view_plate_names(file = file_path)  data_12 #> [1] \"drug\"             \"cell_line\"        \"percent_survived\""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-development-version","dir":"Changelog","previous_headings":"","what":"tidyplate (development version)","title":"tidyplate (development version)","text":"Major updates function increasing speed efficiency. Added new function build_plate","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-110","dir":"Changelog","previous_headings":"","what":"tidyplate 1.1.0","title":"tidyplate 1.1.0","text":"CRAN release: 2024-02-04 Removed tidyplate warnings Fixed double extension printing output message well_id column now leading zeros","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-100","dir":"Changelog","previous_headings":"","what":"tidyplate 1.0.0","title":"tidyplate 1.0.0","text":"CRAN release: 2024-01-11 Added quotes around package name DESCRIPTION. Removed unecessary files.","code":""},{"path":"http://www.shubhamdutta.com/tidyplate/news/index.html","id":"tidyplate-090","dir":"Changelog","previous_headings":"","what":"tidyplate 0.9.0","title":"tidyplate 0.9.0","text":"Initial CRAN submission.","code":""}]
